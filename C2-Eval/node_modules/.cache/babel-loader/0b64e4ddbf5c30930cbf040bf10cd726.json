{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\Evaluation\\\\my-app\\\\src\\\\components\\\\Recipe.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport RecipeInput from \"./RecipeInput\";\nimport RecipeList from \"./RecipeList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Recipe = () => {\n  _s();\n\n  const [food, setFood] = useState([]);\n  const [text, setText] = useState(\"\");\n  console.log(food);\n  useEffect(() => {\n    getFood();\n    foodChange;\n    return;\n  }, []);\n\n  const addFood = () => {\n    const payload = {\n      text,\n      id: nanoid(8)\n    };\n    fetch(\"http://localhost:4500/foods\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    }).then(() => {\n      getFood();\n    });\n  };\n\n  const getFood = () => {\n    fetch(\"http://localhost:4500/foods\").then(res => res.json()).then(res => {\n      setFood(res);\n    });\n  };\n\n  const foodChange = data => {\n    console.log(\"Received on Parent:\", data);\n    const payload = {\n      data,\n      id: nanoid(8)\n    };\n    setFood([...food, payload]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(RecipeInput, {\n      className: \"RecipeInput\",\n      getData: foodChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), food.map(e => /*#__PURE__*/_jsxDEV(RecipeList, {\n      className: \"RecipeList\",\n      title: e.data\n    }, e.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Recipe, \"fLe8zVPOW2LjCGE328J4AwkpzGI=\");\n\n_c = Recipe;\nexport default Recipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recipe\");","map":{"version":3,"sources":["D:/Learning/Evaluation/my-app/src/components/Recipe.jsx"],"names":["useState","useEffect","nanoid","RecipeInput","RecipeList","Recipe","food","setFood","text","setText","console","log","getFood","foodChange","addFood","payload","id","fetch","method","headers","body","JSON","stringify","then","res","json","data","map","e"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AACA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAL,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,OAAO;AACNC,IAAAA,UAAU;AACX;AAEH,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMC,OAAO,GAAG,MAAM;AACpB,UAAMC,OAAO,GAAG;AACdP,MAAAA,IADc;AAEdQ,MAAAA,EAAE,EAAEd,MAAM,CAAC,CAAD;AAFI,KAAhB;AAIAe,IAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF0B;AAKnCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,OAAf;AAL6B,KAAhC,CAAL,CAMGQ,IANH,CAMQ,MAAM;AACZX,MAAAA,OAAO;AACR,KARD;AASD,GAdD;;AAeA,QAAMA,OAAO,GAAG,MAAM;AACpBK,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACGM,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESC,GAAD,IAAS;AACbjB,MAAAA,OAAO,CAACiB,GAAD,CAAP;AACD,KAJH;AAKD,GAND;;AAQA,QAAMX,UAAU,GAAIa,IAAD,IAAU;AAC3BhB,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCe,IAAnC;AACA,UAAMX,OAAO,GAAG;AACdW,MAAAA,IADc;AAEdV,MAAAA,EAAE,EAAEd,MAAM,CAAC,CAAD;AAFI,KAAhB;AAIAK,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUS,OAAV,CAAD,CAAP;AACD,GAPD;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,SAAS,EAAC,aAAvB;AAAqC,MAAA,OAAO,EAAEF;AAA9C;AAAA;AAAA;AAAA;AAAA,YADF,EAEGP,IAAI,CAACqB,GAAL,CAAUC,CAAD,iBACR,QAAC,UAAD;AAAY,MAAA,SAAS,EAAC,YAAtB;AAA8C,MAAA,KAAK,EAAEA,CAAC,CAACF;AAAvD,OAAwCE,CAAC,CAACZ,EAA1C;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAlDD;;GAAMX,M;;KAAAA,M;AAoDN,eAAeA,MAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport RecipeInput from \"./RecipeInput\";\r\nimport RecipeList from \"./RecipeList\";\r\nconst Recipe = () => {\r\n  const [food, setFood] = useState([]);\r\n  const [text, setText] = useState(\"\");\r\n  console.log(food);\r\n  useEffect(() => {\r\n      getFood();\r\n       foodChange\r\n      return \r\n     \r\n  }, []);\r\n\r\n  const addFood = () => {\r\n    const payload = {\r\n      text,\r\n      id: nanoid(8),\r\n    };\r\n    fetch(\"http://localhost:4500/foods\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(payload),\r\n    }).then(() => {\r\n      getFood();\r\n    });\r\n  };\r\n  const getFood = () => {\r\n    fetch(\"http://localhost:4500/foods\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setFood(res);\r\n      });\r\n  };\r\n\r\n  const foodChange = (data) => {\r\n    console.log(\"Received on Parent:\", data);\r\n    const payload = {\r\n      data,\r\n      id: nanoid(8),\r\n    };\r\n    setFood([...food, payload]);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <RecipeInput className=\"RecipeInput\" getData={foodChange} />\r\n      {food.map((e) => (\r\n        <RecipeList className=\"RecipeList\" key={e.id} title={e.data} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n"]},"metadata":{},"sourceType":"module"}